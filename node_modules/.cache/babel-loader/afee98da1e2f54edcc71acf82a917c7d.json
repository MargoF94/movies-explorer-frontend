{"ast":null,"code":"var _jsxFileName = \"/Users/localmoyashi/dev/movies-explorer-frontend/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport Profile from '../Profile/Profile';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Page404 from '../Page404/Page404';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport * as tooltip from '../../utils/tooltip';\nimport * as MainApi from '../../utils/MainApi';\nimport * as MoviesApi from '../../utils/MoviesApi';\nimport './App.css';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  const [isInfoToolTipOpen, setIsInfoToolTipOpen] = useState(false);\n  const [infoToolTipInfo, setInfoToolTipInfo] = useState({});\n  const [movies, setMovies] = useState([]); // Фильмы, полученные от Api\n\n  const [savedMovies, setSavedMovies] = useState([]); // Фильмы, сохраненные пользователем\n\n  const [movieSearchResult, setMovieSearchResult] = useState([]);\n  const [savedMovieSearchResult, setSavedMovieSearchResult] = useState([]);\n  const [isShortMovieChecked, setIsShortMovieChecked] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNoResults, setIsNoResuls] = useState(false); // ЛОКАЛЬНОЕ ХРАНИЛИЩЕ\n  // Фильмы, полученные после фильтрации\n  // const searchResultLocalStorage = JSON.parse(localStorage.getItem('searchResults'));\n  // Текст запроса\n\n  const searchWordLocalStorage = localStorage.getItem('searchWord'); // Состояние переключателя\n\n  const filterState = localStorage.getItem('filterState'); // Обработка регистрации\n\n  function handleRegister(name, email, password) {\n    MainApi.register(email, password, name).then(res => {\n      if (res.ok) {\n        history.push('/signin');\n        setInfoToolTipInfo({\n          mesage: tooltip.registrationSuccess,\n          image: tooltip.successIcon\n        });\n      } else {\n        setInfoToolTipInfo({\n          message: tooltip.registrationFail,\n          image: tooltip.successIcon\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.registrationFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      setIsInfoToolTipOpen(true);\n    });\n  } // Обработка логина\n\n\n  function handleLogin(email, password) {\n    if (!email || !password) {\n      console.log('No email or password on login; aborting.');\n      console.log(`Email: ${email}`);\n      console.log(`Password: ${password}`);\n      return;\n    }\n\n    MainApi.login(email, password).then(data => {\n      if (!data.jwt) {\n        throw new Error('Произошла ошибка (авторизации на фронте)');\n      }\n\n      localStorage.setItem('jwt', data.jwt);\n      localStorage.setItem('searchResults', []);\n      localStorage.setItem('filterState', false);\n      localStorage.setItem('searchWord', '');\n      localStorage.setItem('searchWordInSaved', '');\n      return data._id;\n    }).then(id => {\n      tokenCheck();\n      setCurrentUser({\n        _id: id\n      }); // setIsLoggedIn(true);\n      // history.push('/movies');\n\n      setInfoToolTipInfo({\n        message: tooltip.loginSuccess,\n        image: tooltip.successIcon\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.loginFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      console.log(`Before Popup open: ${isLoggedIn}`);\n      setIsInfoToolTipOpen(true);\n    });\n  } // Обработка обновления профиля\n\n\n  function handleEditProfileSubmit(name, email) {\n    MainApi.editProfile(name, email).then(data => {\n      setCurrentUser(data);\n      setInfoToolTipInfo({\n        message: tooltip.updateSuccess,\n        image: tooltip.successIcon\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.updateFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      setIsInfoToolTipOpen(true);\n    });\n  }\n\n  function handleLogOut() {\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('searcResults');\n    localStorage.removeItem('searchWord');\n    localStorage.removeItem('searchWordInSaved');\n    localStorage.removeItem('filterState');\n    setIsLoggedIn(false);\n    history.push('/signin');\n  }\n\n  function closePopups() {\n    setIsInfoToolTipOpen(false);\n  } // Добавить фильм в библиотеку сохраненных фильмов\n  // или оповестить юзера об ошибке\n\n\n  function handleSetLike(movie) {\n    console.log(`IN SRT LIKE: movie: ${movie}`);\n    const isSaved = savedMovies.find(savedMovie => savedMovie.movieId === movie.movieId);\n    console.log(`IN SET LIKE ISSAVED: ${isSaved}`);\n\n    if (isSaved === undefined) {\n      MainApi.createLocalCard(movie).then(data => {\n        console.log(data);\n        const createdMovie = data.movie;\n        setInfoToolTipInfo({\n          message: tooltip.saveSuccess,\n          image: tooltip.successIcon\n        });\n        setSavedMovies([createdMovie, ...savedMovies]);\n      }).catch(err => {\n        setInfoToolTipInfo({\n          message: tooltip.saveFail,\n          image: tooltip.failIcon\n        });\n        setIsInfoToolTipOpen(true);\n      }).finally(() => {\n        setIsInfoToolTipOpen(true);\n      });\n    } else {\n      setInfoToolTipInfo({\n        message: tooltip.saveFailRepeat,\n        image: tooltip.failIcon\n      });\n      setIsInfoToolTipOpen(true);\n    }\n  } // не подставляется id с главной страницы\n\n\n  function handleRemoveLike(movie) {\n    console.log(`In App handleRemoveLike movie: id: ${movie.movieId}`);\n    MainApi.deleteLocalMovie(movie.movieId).then(() => {\n      setSavedMovies(savedMovies => savedMovies.filter(m => m.movieId !== movie.movieId));\n      setInfoToolTipInfo({\n        message: tooltip.removeSuccess,\n        image: tooltip.successIcon\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.removeFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      setIsInfoToolTipOpen(true);\n    });\n  } // Переключатель состояния фильтра короткометражек\n  // Переписывает значение фильтра на локальном диске и \n  // переменной состояния\n\n\n  function toggleCheckBox() {\n    const filter = JSON.parse(localStorage.getItem('filterState'));\n    setIsShortMovieChecked(!filter);\n    localStorage.setItem('filterState', !filter);\n    console.log(`FILTER STATE (LOCAL) ON TOGGLE IS ${localStorage.getItem('filterState')}`);\n    console.log(`FILTER STATE (STATE) ON TOGGLE IS ${isShortMovieChecked}`);\n  } // Функция по фильтрации массивов с фильмами по ключевому слову\n  // и длительности\n\n\n  function filterBySearchWord(list, word, isShortOn) {\n    if (list.length > 0) {\n      if (!isShortOn) {\n        return list.filter(movie => movie.nameRU.toLowerCase().includes(word.toLowerCase()) && movie.duration < 40);\n      } else {\n        return list.filter(movie => movie.nameRU.toLowerCase().includes(word.toLowerCase()));\n      }\n    } else {\n      return [];\n    }\n  } // При отображении фильмов в блоке результатов\n  // фильмы, ранее сохраненные пользователем берутся с сервера\n  // (так как только на них будет ярлык сохраненных));\n  // function handleSearchRequest(word) {\n  //   setIsLoading(true);\n  //   console.log(`IN SEARCH: MOVIES ${movies}`)\n  //   console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n  //   console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n  //   setTimeout(() => {\n  //     // Достаем состояние переключателя из локального хранилища\n  //     // Проверяем все фильмы\n  //     // Проверяем сохраненные фильмы\n  //     // const isFilterOn = localStorage.getItem('filterState');\n  //     // console.log(`FILTER STATE ON SEARCH IS ${isFilterOn}`);\n  //     const allFilteredMovies = filterBySearchWord(movies, word, isShortMovieChecked);\n  //     const allSavedMovies = filterBySearchWord(savedMovies, word, isShortMovieChecked);\n  //     // Сравниваем два массива,\n  //     // повторяющиеся фильмы берем с серверной стороны\n  //     const movieList = allFilteredMovies.map((movie) => {\n  //       const savedMovie = allSavedMovies.find((savedM) => savedM.movieId === movie.id);\n  //       return savedMovie ?? movie;\n  //     })\n  //     // Если результатов нет - записываем в переменную пустой массив\n  //     if(movieList !== null && movieList.length !== 0) {\n  //       console.log(`SAVING SEARCH RESULTS IN LOCAL STORAGE: ${movieList}`)\n  //       localStorage.setItem('searchResults', JSON.stringify(movieList));\n  //       setIsNoResuls(false);\n  //     } else {\n  //       localStorage.setItem('searchResults', []);\n  //       setIsNoResuls(true);\n  //     }\n  //     setMovieSearchResult(movieList);\n  //     // setRender();\n  //     setIsLoading(false);\n  //   }, 1000);\n  // }\n\n\n  function handleSearchRequest(word) {\n    setIsLoading(true);\n    console.log(`IN SEARCH: WORD ${word}`);\n    console.log(`IN SEARCH: MOVIES ${movies}`);\n    console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n    console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n    setTimeout(() => {\n      // Достаем состояние переключателя из локального хранилища\n      // Проверяем все фильмы\n      // Проверяем сохраненные фильмы\n      // const isFilterOn = localStorage.getItem('filterState');\n      // console.log(`FILTER STATE ON SEARCH IS ${isFilterOn}`);\n      const moviesToFilter = location.pathname === '/movies' ? movies : savedMovies;\n      console.log(`IN SEARCH: MOVIES TO FILTER ${moviesToFilter}`);\n      const movieList = filterBySearchWord(moviesToFilter, word, isShortMovieChecked); // Сравниваем два массива,\n      // повторяющиеся фильмы берем с серверной стороны\n      // const movieList = allFilteredMovies.map((movie) => {\n      //   const savedMovie = allSavedMovies.find((savedM) => savedM.movieId === movie.id);\n      //   return savedMovie ?? movie;\n      // })\n      // Если результатов нет - записываем в переменную пустой массив\n\n      if (movieList !== null && movieList.length !== 0) {\n        console.log(`SAVING SEARCH RESULTS IN LOCAL STORAGE: ${movieList}`);\n        localStorage.setItem('searchResults', JSON.stringify(movieList));\n        setIsNoResuls(false);\n      } else {\n        localStorage.setItem('searchResults', []);\n        setIsNoResuls(true);\n      }\n\n      setMovieSearchResult(movieList); // setRender();\n\n      setIsLoading(false);\n    }, 1000);\n  }\n\n  function handleSearchRequestInSaved(word) {\n    setIsLoading(true);\n    console.log(`IN SEARCH: WORD ${word}`);\n    console.log(`IN SEARCH: MOVIES ${movies}`);\n    console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n    console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n    setTimeout(() => {\n      const movieList = filterBySearchWord(savedMovies, word, isShortMovieChecked);\n\n      if (movieList !== null && movieList.length !== 0) {\n        setIsNoResuls(false); // localStorage.setItem('savedSearchResult', movieList);\n      } else {\n        setIsNoResuls(true);\n      }\n\n      setSavedMovieSearchResult(movieList);\n      setIsLoading(false);\n    }, 1000);\n  } // Проверяем наличие токена в локальном хранилище\n  // если токен присутствует - \n  // меняем состояние логина и\n  // забираем данные о юзере с сервера и сохранем в переменную состояния. \n\n\n  function tokenCheck() {\n    const jwt = localStorage.getItem('jwt'); // const filter = localStorage.getItem('filterState');\n    // console.log(filter);\n    // const savedMoviesFromStorage = (localStorage.getItem('searchResults') !== null && isLoggedIn) ?\n    //   JSON.parse(localStorage.getItem('searchResults')) :\n    //   [];\n\n    console.log('ACTION 1 (tokenCheck)');\n    console.log(`Token in tokenCheck: ${jwt}`);\n    console.log(`777777777 Token in tokenCheck: idLoggedIn ${isLoggedIn}`);\n    console.log(`22222 In getSearchResults: ${movieSearchResult}`);\n\n    if (jwt) {\n      MainApi.getContent(jwt).then(user => {\n        if (user) {\n          setCurrentUser(user);\n          setIsLoggedIn(true);\n          setMovieSearchResult(getSearchResults);\n          setIsShortMovieChecked(JSON.parse(localStorage.getItem('filterState')));\n          console.log(`isShortMovieChecked ${isShortMovieChecked}`);\n          location.pathname === '/signin' ? history.push('/movies') : history.push(location.pathname);\n          console.log(`Token in tokenCheck: idLoggedIn ${isLoggedIn}`);\n          console.log(`In tokenCheck: getContent currentUSer: ${currentUser}`);\n          console.log(`In tokenCheck: getContent response: ${JSON.stringify(user)}`);\n        } else {\n          localStorage.removeItem('jwt');\n        }\n      }).catch(err => {\n        console.log(err);\n        localStorage.removeItem('jwt');\n      });\n    }\n  } // Извлекает и записывает данные с локального хранилища в переменную состояния\n\n\n  function getSearchResults() {\n    return localStorage.getItem('searchResults').length > 0 ? JSON.parse(localStorage.getItem('searchResults')) : [];\n  } // Если пользователь залогинен\n  // получаем все фильмы с API и сохраненные юзером фильмы\n\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      console.log(`Fetching movies...`);\n      console.log('ACTION 2 (about to fetch movies)');\n      Promise.all([MoviesApi.getMovies(), MainApi.getSavedMovies()]).then(_ref => {\n        let [allMovies, userSavedMovies] = _ref;\n        // console.log('ACTION 3 (about to set movies and savedMovies)');\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${allMovies}`);\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${JSON.stringify(allMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${Array.isArray(allMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${userSavedMovies}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${JSON.stringify(userSavedMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${Array.isArray(userSavedMovies)}`);\n        setMovies(allMovies);\n\n        if (userSavedMovies) {\n          setSavedMovies(userSavedMovies); // console.log(`In MainApi.getSavedMovies: savedMovies: ${savedMovies}`);\n        } else {\n          setSavedMovies([]);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [isLoggedIn]); // Проверяем токен при передвижению по сайту\n  // Перезаписываем отфильтрованные фильмы в переменную состояния\n  // из локального хранилища\n\n  useEffect(() => {\n    // console.log(`8888888888 isLoggedIn ${isLoggedIn}`);\n    tokenCheck();\n  }, []); // useEffect(() => {\n  //   setRender();\n  // }, [isLoggedIn, savedMovies]);\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Main, {\n            isLoggedIn: isLoggedIn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/movies\",\n          component: Movies,\n          movies: movieSearchResult,\n          savedMovies: savedMovies,\n          searchWord: searchWordLocalStorage,\n          handleSetLike: handleSetLike,\n          handleRemoveLike: handleRemoveLike,\n          onSearch: handleSearchRequest,\n          handleCheckboxToggle: toggleCheckBox,\n          isLoggedIn: isLoggedIn,\n          isShortMovieChecked: isShortMovieChecked,\n          isNoResults: isNoResults,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/saved-movies\",\n          component: SavedMovies,\n          movies: savedMovies,\n          savedMovieSearchResult: savedMovieSearchResult,\n          handleRemoveLike: handleRemoveLike,\n          onSearch: handleSearchRequest,\n          onSavedSearch: handleSearchRequestInSaved,\n          handleCheckboxToggle: toggleCheckBox,\n          isLoggedIn: isLoggedIn,\n          isShortMovieChecked: isShortMovieChecked,\n          isNoResults: isNoResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/profile\",\n          component: Profile,\n          onSubmit: handleEditProfileSubmit,\n          onLogOut: handleLogOut,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            handleLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            handleRegister: handleRegister\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          children: /*#__PURE__*/_jsxDEV(Page404, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        isOpen: isInfoToolTipOpen,\n        onClose: closePopups,\n        info: infoToolTipInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kLtg2MdjO2sCNehyNFBjaM0nx+w=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Route","Switch","useHistory","useLocation","Main","Movies","SavedMovies","Profile","Login","Register","Page404","InfoTooltip","ProtectedRoute","tooltip","MainApi","MoviesApi","CurrentUserContext","App","history","location","isLoggedIn","setIsLoggedIn","currentUser","setCurrentUser","isInfoToolTipOpen","setIsInfoToolTipOpen","infoToolTipInfo","setInfoToolTipInfo","movies","setMovies","savedMovies","setSavedMovies","movieSearchResult","setMovieSearchResult","savedMovieSearchResult","setSavedMovieSearchResult","isShortMovieChecked","setIsShortMovieChecked","isLoading","setIsLoading","isNoResults","setIsNoResuls","searchWordLocalStorage","localStorage","getItem","filterState","handleRegister","name","email","password","register","then","res","ok","push","mesage","registrationSuccess","image","successIcon","message","registrationFail","catch","err","console","log","failIcon","finally","handleLogin","login","data","jwt","Error","setItem","_id","id","tokenCheck","loginSuccess","loginFail","handleEditProfileSubmit","editProfile","updateSuccess","updateFail","handleLogOut","removeItem","closePopups","handleSetLike","movie","isSaved","find","savedMovie","movieId","undefined","createLocalCard","createdMovie","saveSuccess","saveFail","saveFailRepeat","handleRemoveLike","deleteLocalMovie","filter","m","removeSuccess","removeFail","toggleCheckBox","JSON","parse","filterBySearchWord","list","word","isShortOn","length","nameRU","toLowerCase","includes","duration","handleSearchRequest","setTimeout","moviesToFilter","pathname","movieList","stringify","handleSearchRequestInSaved","getContent","user","getSearchResults","Promise","all","getMovies","getSavedMovies","allMovies","userSavedMovies"],"sources":["/Users/localmoyashi/dev/movies-explorer-frontend/src/components/App/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport Profile from '../Profile/Profile';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Page404 from '../Page404/Page404';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport * as tooltip from '../../utils/tooltip';\nimport * as MainApi from '../../utils/MainApi';\nimport * as MoviesApi from '../../utils/MoviesApi';\nimport './App.css';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\nfunction App() {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  const [isInfoToolTipOpen, setIsInfoToolTipOpen] = useState(false);\n  const [infoToolTipInfo, setInfoToolTipInfo] = useState({});\n  const [movies, setMovies] = useState([]); // Фильмы, полученные от Api\n  const [savedMovies, setSavedMovies] = useState([]); // Фильмы, сохраненные пользователем\n  const [movieSearchResult, setMovieSearchResult] = useState([]);\n  const [savedMovieSearchResult, setSavedMovieSearchResult] = useState([]);\n  const [isShortMovieChecked, setIsShortMovieChecked] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNoResults, setIsNoResuls] = useState(false);\n\n  // ЛОКАЛЬНОЕ ХРАНИЛИЩЕ\n\n  // Фильмы, полученные после фильтрации\n  // const searchResultLocalStorage = JSON.parse(localStorage.getItem('searchResults'));\n  // Текст запроса\n  const searchWordLocalStorage = localStorage.getItem('searchWord');\n  // Состояние переключателя\n  const filterState = localStorage.getItem('filterState');\n\n  // Обработка регистрации\n\n  function handleRegister (name, email, password) {\n    MainApi.register(email, password, name)\n      .then((res) => {\n        if (res.ok) {\n          history.push('/signin');\n          setInfoToolTipInfo({\n            mesage: tooltip.registrationSuccess,\n            image: tooltip.successIcon\n          });\n        } else {\n          setInfoToolTipInfo({\n            message: tooltip.registrationFail,\n            image: tooltip.successIcon\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.registrationFail,\n          image: tooltip.failIcon\n        });\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true);\n      })\n  }\n  \n  // Обработка логина\n\n  function handleLogin (email, password) {\n    if (!email || !password) {\n      console.log('No email or password on login; aborting.');\n      console.log(`Email: ${email}`);\n      console.log(`Password: ${password}`);\n      return;\n    }\n    \n    MainApi.login(email, password)\n      .then((data) => {\n        if(!data.jwt) {\n          throw new Error('Произошла ошибка (авторизации на фронте)');\n        }\n        localStorage.setItem('jwt', data.jwt);\n        localStorage.setItem('searchResults', []);\n        localStorage.setItem('filterState', false);\n        localStorage.setItem('searchWord', '');\n        localStorage.setItem('searchWordInSaved', '');\n        return data._id;\n      })\n      .then((id) => {\n        tokenCheck();\n        setCurrentUser({\n          _id: id,\n        });\n        // setIsLoggedIn(true);\n        // history.push('/movies');\n        setInfoToolTipInfo({\n          message: tooltip.loginSuccess,\n          image: tooltip.successIcon\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.loginFail,\n          image: tooltip.failIcon\n        });\n      })\n      .finally(() => {\n        console.log(`Before Popup open: ${isLoggedIn}`)\n        setIsInfoToolTipOpen(true);\n      });\n  }\n\n  // Обработка обновления профиля\n\n  function handleEditProfileSubmit (name, email) {\n    MainApi.editProfile(name, email)\n      .then((data) => {\n        setCurrentUser(data);\n        setInfoToolTipInfo({\n          message: tooltip.updateSuccess,\n          image: tooltip.successIcon\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.updateFail,\n          image: tooltip.failIcon\n        })\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true)\n      });\n  }\n\n  function handleLogOut () {\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('searcResults');\n    localStorage.removeItem('searchWord');\n    localStorage.removeItem('searchWordInSaved');\n    localStorage.removeItem('filterState');\n    setIsLoggedIn(false);\n    history.push('/signin');\n  }\n\n  function closePopups () {\n    setIsInfoToolTipOpen(false);\n  }\n\n  // Добавить фильм в библиотеку сохраненных фильмов\n  // или оповестить юзера об ошибке\n\n  function handleSetLike(movie) {\n\n    console.log(`IN SRT LIKE: movie: ${movie}`);\n\n    const isSaved = savedMovies.find((savedMovie) => savedMovie.movieId  === movie.movieId);\n\n    console.log(`IN SET LIKE ISSAVED: ${isSaved}`);\n\n    if(isSaved === undefined) {\n      MainApi.createLocalCard(movie)\n      .then((data) => {\n        console.log(data);\n        const createdMovie = data.movie;\n\n        setInfoToolTipInfo({\n          message: tooltip.saveSuccess,\n          image: tooltip.successIcon\n        });\n        setSavedMovies([createdMovie, ...savedMovies])\n      })\n      .catch((err) => {\n        setInfoToolTipInfo({\n          message: tooltip.saveFail,\n          image: tooltip.failIcon\n        });\n        setIsInfoToolTipOpen(true);\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true);\n      })\n    } else {\n      setInfoToolTipInfo({\n        message: tooltip.saveFailRepeat,\n        image: tooltip.failIcon\n      });\n      setIsInfoToolTipOpen(true);\n    } \n  }\n\n  // не подставляется id с главной страницы\n\n  function handleRemoveLike (movie) {\n    console.log(`In App handleRemoveLike movie: id: ${movie.movieId}`);\n    MainApi.deleteLocalMovie(movie.movieId)\n      .then(() => {\n        setSavedMovies((savedMovies) => savedMovies.filter((m) => m.movieId !== movie.movieId));\n        setInfoToolTipInfo({\n          message: tooltip.removeSuccess,\n          image: tooltip.successIcon\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.removeFail,\n          image: tooltip.failIcon\n        });\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true);\n      });\n  }\n\n  // Переключатель состояния фильтра короткометражек\n  // Переписывает значение фильтра на локальном диске и \n  // переменной состояния\n\n  function toggleCheckBox() {\n    const filter = JSON.parse(localStorage.getItem('filterState'));\n    setIsShortMovieChecked(!filter);\n    localStorage.setItem('filterState', !filter);\n    console.log(`FILTER STATE (LOCAL) ON TOGGLE IS ${localStorage.getItem('filterState')}`);\n    console.log(`FILTER STATE (STATE) ON TOGGLE IS ${isShortMovieChecked}`);\n  }\n\n  // Функция по фильтрации массивов с фильмами по ключевому слову\n  // и длительности\n\n  function filterBySearchWord(list, word, isShortOn) {\n    if (list.length > 0) {\n      if (!isShortOn) {\n        return list.filter((movie) => movie.nameRU.toLowerCase().includes(word.toLowerCase()) && movie.duration < 40);\n      } else {\n        return list.filter((movie) => movie.nameRU.toLowerCase().includes(word.toLowerCase()));\n      }\n    } else {\n      return [];\n    }\n  }\n\n  // При отображении фильмов в блоке результатов\n  // фильмы, ранее сохраненные пользователем берутся с сервера\n  // (так как только на них будет ярлык сохраненных));\n\n  // function handleSearchRequest(word) {\n  //   setIsLoading(true);\n\n  //   console.log(`IN SEARCH: MOVIES ${movies}`)\n  //   console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n  //   console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n\n  //   setTimeout(() => {\n  //     // Достаем состояние переключателя из локального хранилища\n  //     // Проверяем все фильмы\n  //     // Проверяем сохраненные фильмы\n  //     // const isFilterOn = localStorage.getItem('filterState');\n  //     // console.log(`FILTER STATE ON SEARCH IS ${isFilterOn}`);\n\n  //     const allFilteredMovies = filterBySearchWord(movies, word, isShortMovieChecked);\n  //     const allSavedMovies = filterBySearchWord(savedMovies, word, isShortMovieChecked);\n\n  //     // Сравниваем два массива,\n  //     // повторяющиеся фильмы берем с серверной стороны\n  //     const movieList = allFilteredMovies.map((movie) => {\n  //       const savedMovie = allSavedMovies.find((savedM) => savedM.movieId === movie.id);\n  //       return savedMovie ?? movie;\n  //     })\n\n  //     // Если результатов нет - записываем в переменную пустой массив\n  //     if(movieList !== null && movieList.length !== 0) {\n  //       console.log(`SAVING SEARCH RESULTS IN LOCAL STORAGE: ${movieList}`)\n  //       localStorage.setItem('searchResults', JSON.stringify(movieList));\n  //       setIsNoResuls(false);\n  //     } else {\n  //       localStorage.setItem('searchResults', []);\n  //       setIsNoResuls(true);\n  //     }\n\n  //     setMovieSearchResult(movieList);\n  //     // setRender();\n  //     setIsLoading(false);\n  //   }, 1000);\n  // }\n\n  function handleSearchRequest(word) {\n    setIsLoading(true);\n\n    console.log(`IN SEARCH: WORD ${word}`)\n    console.log(`IN SEARCH: MOVIES ${movies}`)\n    console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n    console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n\n    setTimeout(() => {\n      // Достаем состояние переключателя из локального хранилища\n      // Проверяем все фильмы\n      // Проверяем сохраненные фильмы\n      // const isFilterOn = localStorage.getItem('filterState');\n      // console.log(`FILTER STATE ON SEARCH IS ${isFilterOn}`);\n      const moviesToFilter = location.pathname === '/movies' ? movies : savedMovies;\n\n      console.log(`IN SEARCH: MOVIES TO FILTER ${moviesToFilter}`);\n\n      const movieList = filterBySearchWord(moviesToFilter, word, isShortMovieChecked);\n  \n\n      // Сравниваем два массива,\n      // повторяющиеся фильмы берем с серверной стороны\n      // const movieList = allFilteredMovies.map((movie) => {\n      //   const savedMovie = allSavedMovies.find((savedM) => savedM.movieId === movie.id);\n      //   return savedMovie ?? movie;\n      // })\n\n      // Если результатов нет - записываем в переменную пустой массив\n      if(movieList !== null && movieList.length !== 0) {\n        console.log(`SAVING SEARCH RESULTS IN LOCAL STORAGE: ${movieList}`)\n        localStorage.setItem('searchResults', JSON.stringify(movieList));\n        setIsNoResuls(false);\n      } else {\n        localStorage.setItem('searchResults', []);\n        setIsNoResuls(true);\n      }\n\n      setMovieSearchResult(movieList);\n      // setRender();\n      setIsLoading(false);\n    }, 1000);\n  }\n\n  function handleSearchRequestInSaved(word) {\n    setIsLoading(true);\n    console.log(`IN SEARCH: WORD ${word}`)\n    console.log(`IN SEARCH: MOVIES ${movies}`)\n    console.log(`IN SEARCH: SAVED MOVIES ${savedMovies}`);\n    console.log(`isShortMovieChecked: ${isShortMovieChecked}`);\n\n    setTimeout(() => {\n\n      const movieList = filterBySearchWord(savedMovies, word, isShortMovieChecked);\n\n      if(movieList !== null && movieList.length !== 0) {\n        setIsNoResuls(false);\n        // localStorage.setItem('savedSearchResult', movieList);\n      } else {\n        setIsNoResuls(true);\n      }\n\n      setSavedMovieSearchResult(movieList);\n      setIsLoading(false);\n\n    }, 1000);\n  }\n\n  // Проверяем наличие токена в локальном хранилище\n  // если токен присутствует - \n  // меняем состояние логина и\n  // забираем данные о юзере с сервера и сохранем в переменную состояния. \n\n  function tokenCheck () {\n    const jwt = localStorage.getItem('jwt');\n    // const filter = localStorage.getItem('filterState');\n    // console.log(filter);\n    // const savedMoviesFromStorage = (localStorage.getItem('searchResults') !== null && isLoggedIn) ?\n    //   JSON.parse(localStorage.getItem('searchResults')) :\n    //   [];\n    console.log('ACTION 1 (tokenCheck)');\n    console.log(`Token in tokenCheck: ${jwt}`);\n    console.log(`777777777 Token in tokenCheck: idLoggedIn ${isLoggedIn}`);\n    console.log(`22222 In getSearchResults: ${movieSearchResult}`);\n\n    if (jwt) {\n      MainApi.getContent(jwt)\n        .then((user) => {\n          if (user) {\n            setCurrentUser(user);\n            setIsLoggedIn(true);\n            setMovieSearchResult(getSearchResults);\n            setIsShortMovieChecked(JSON.parse(localStorage.getItem('filterState')));\n            console.log(`isShortMovieChecked ${isShortMovieChecked}`)\n            location.pathname === '/signin' ? \n              history.push('/movies') :\n              history.push(location.pathname);\n            console.log(`Token in tokenCheck: idLoggedIn ${isLoggedIn}`);\n\n            console.log(`In tokenCheck: getContent currentUSer: ${currentUser}`);\n            console.log(`In tokenCheck: getContent response: ${JSON.stringify(user)}`);\n          } else {\n            localStorage.removeItem('jwt');\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          localStorage.removeItem('jwt');\n        })\n    }\n  }\n\n  // Извлекает и записывает данные с локального хранилища в переменную состояния\n\n  function getSearchResults() {\n    return localStorage.getItem('searchResults').length > 0 ?\n      JSON.parse(localStorage.getItem('searchResults')) :\n      [];\n  }\n\n  // Если пользователь залогинен\n  // получаем все фильмы с API и сохраненные юзером фильмы\n\n  useEffect(() => {\n    if(isLoggedIn) {\n      console.log(`Fetching movies...`);\n      console.log('ACTION 2 (about to fetch movies)');\n\n      Promise.all([\n        MoviesApi.getMovies(),\n        MainApi.getSavedMovies()\n      ])\n      .then(([allMovies, userSavedMovies]) => {\n        // console.log('ACTION 3 (about to set movies and savedMovies)');\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${allMovies}`);\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${JSON.stringify(allMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: allMovies: ${Array.isArray(allMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${userSavedMovies}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${JSON.stringify(userSavedMovies)}`);\n        // console.log(`In MainApi.getSavedMovies: savedMovies: ${Array.isArray(userSavedMovies)}`);\n        setMovies(allMovies);\n        if (userSavedMovies) {\n          setSavedMovies(userSavedMovies);\n          // console.log(`In MainApi.getSavedMovies: savedMovies: ${savedMovies}`);\n        } else {\n          setSavedMovies([]);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    }    \n  }, [isLoggedIn])\n\n  // Проверяем токен при передвижению по сайту\n  // Перезаписываем отфильтрованные фильмы в переменную состояния\n  // из локального хранилища\n  useEffect(() => {\n    // console.log(`8888888888 isLoggedIn ${isLoggedIn}`);\n    tokenCheck();\n  }, []);\n\n  // useEffect(() => {\n  //   setRender();\n  // }, [isLoggedIn, savedMovies]);\n\n  \n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Main\n              isLoggedIn={isLoggedIn} />\n          </Route>\n\n          <ProtectedRoute\n            path=\"/movies\"\n            component={Movies}\n            movies={movieSearchResult}\n            savedMovies={savedMovies}\n            searchWord={searchWordLocalStorage}\n            handleSetLike={handleSetLike}\n            handleRemoveLike={handleRemoveLike}\n            onSearch={handleSearchRequest}\n            handleCheckboxToggle={toggleCheckBox}\n            isLoggedIn={isLoggedIn}\n            isShortMovieChecked={isShortMovieChecked}\n            isNoResults={isNoResults}\n            isLoading={isLoading} />\n\n          <ProtectedRoute\n            path=\"/saved-movies\"\n            component={SavedMovies}\n            movies={savedMovies}\n            savedMovieSearchResult={savedMovieSearchResult}\n            handleRemoveLike={handleRemoveLike}\n            onSearch={handleSearchRequest}\n            onSavedSearch={handleSearchRequestInSaved}\n            handleCheckboxToggle={toggleCheckBox}\n            isLoggedIn={isLoggedIn}\n            isShortMovieChecked={isShortMovieChecked}\n            isNoResults={isNoResults} />\n\n          <ProtectedRoute\n            path=\"/profile\"\n            component={Profile}\n            onSubmit={handleEditProfileSubmit}\n            onLogOut={handleLogOut}\n            isLoggedIn={isLoggedIn} />\n\n          <Route path=\"/signin\">\n            <Login\n              handleLogin={handleLogin} />\n          </Route>\n\n          <Route path=\"/signup\">\n            <Register\n              handleRegister={handleRegister} />\n          </Route>\n\n          <Route path=\"*\">\n            <Page404 />\n          </Route>\n        </Switch>\n\n        <InfoTooltip\n          isOpen={isInfoToolTipOpen}\n          onClose={closePopups}\n          info={infoToolTipInfo} />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}