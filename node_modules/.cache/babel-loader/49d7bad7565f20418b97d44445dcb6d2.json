{"ast":null,"code":"var _jsxFileName = \"/Users/localmoyashi/dev/movies-explorer-frontend/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport Profile from '../Profile/Profile';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Page404 from '../Page404/Page404';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport * as tooltip from '../../utils/tooltip';\nimport * as MainApi from '../../utils/MainApi';\nimport * as MoviesApi from '../../utils/MoviesApi';\nimport './App.css';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  const [isInfoToolTipOpen, setIsInfoToolTipOpen] = useState(false);\n  const [infoToolTipInfo, setInfoToolTipInfo] = useState({});\n  const [movies, setMovies] = useState([]); // Фильмы, полученные от Api\n\n  const [savedMovies, setSavedMovies] = useState([]); // Фильмы, сохраненные пользователем\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieSearchResult, setMovieSearchResult] = useState(''); // ЛОКАЛЬНОЕ ХРАНИЛИЩЕ\n  // Фильмы, полученные после фильтрации\n\n  const searchResults = JSON.parse(localStorage.getItem('searchResults')); // Текст запроса\n\n  const searchWord = JSON.parse(localStorage.getItem('searchWord')); // Состояние переключателя\n\n  const filterState = localStorage.getItem('filterState'); // Обработка регистрации\n\n  function handleRegister(name, email, password) {\n    MainApi.register(email, password, name).then(res => {\n      if (res.ok) {\n        history.push('/signin');\n        setInfoToolTipInfo({\n          mesage: tooltip.registrationSuccess,\n          image: tooltip.successIcon\n        });\n      } else {\n        setInfoToolTipInfo({\n          message: tooltip.registrationFail,\n          image: tooltip.successIcon\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.registrationFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      setIsInfoToolTipOpen(true);\n    });\n  } // Обработка логина\n\n\n  function handleLogin(email, password) {\n    if (!email || !password) {\n      console.log('No email or password on login; aborting.');\n      return;\n    }\n\n    MainApi.login(email, password).then(data => {\n      console.log(`In handleLogin: res data: ${data.jwt}`);\n\n      if (!data.jwt) {\n        throw new Error('Произошла ошибка (авторизации на фронте)');\n      }\n\n      localStorage.setItem('jwt', data.jwt);\n      return data._id;\n    }).then(id => {\n      tokenCheck();\n      setCurrentUser({\n        _id: id\n      });\n      setIsLoggedIn(true);\n      history.push('/movies');\n      setInfoToolTipInfo({\n        message: tooltip.loginSuccess,\n        image: tooltip.successIcon\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.loginFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      console.log(`Before Popup open: ${isLoggedIn}`);\n      setIsInfoToolTipOpen(true);\n    });\n  } // Обработка обновления профиля\n\n\n  function handleEditProfileSubmit(name, email) {\n    MainApi.editProfile(name, email).then(data => {\n      setCurrentUser(data);\n      setInfoToolTipInfo({\n        message: tooltip.updateSuccess,\n        image: tooltip.successIcon\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.updateFail,\n        image: tooltip.failIcon\n      });\n    }).finally(() => {\n      setIsInfoToolTipOpen(true);\n    });\n  }\n\n  function handleLogOut() {\n    localStorage.removeItem('jwt');\n    setIsLoggedIn(false);\n    history.push('/signin');\n  }\n\n  function closePopups() {\n    setIsInfoToolTipOpen(false);\n  } // Добавить фильм в библиотеку сохраненных фильмов\n  // или оповестить юзера об ошибке\n\n\n  function handleSetLike(movie) {\n    MainApi.createLocalCard(movie).then(createdMovie => {\n      console.log(`Saved movie in handleSetLike: ${createdMovie}`);\n      setSavedMovies([createdMovie, ...savedMovies]);\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.saveFail,\n        image: tooltip.failIcon\n      });\n      setIsInfoToolTipOpen(true);\n    });\n  }\n\n  function handleRemoveLike(movie) {\n    MainApi.deleteLocalMovie(movie.movieId).then(() => {\n      MainApi.getSavedMovies.then(movies => {\n        setSavedMovies(movies);\n      }).catch(err => {\n        console.log(err);\n      });\n    }).catch(err => {\n      console.log(err);\n      setInfoToolTipInfo({\n        message: tooltip.removeFail,\n        image: tooltip.failIcon\n      });\n      setIsInfoToolTipOpen(true);\n    });\n  } // Получить фильмы с API\n  // происходит при авторизации\n\n\n  function getMovies() {\n    MoviesApi.getMovies().then(data => {\n      if (data) {\n        console.log(`MoviesApi response: ${JSON.stringify(data)}`);\n        setMovies(JSON.stringify(data));\n        return;\n      }\n\n      setMovies([]);\n    }).catch(err => {\n      console.log(err);\n    });\n  } // Получить все сохраненные фильмы с сервера\n\n\n  function getSavedMovies() {\n    console.log(`Login State in getSavedMovies on login:${isLoggedIn}`);\n\n    if (isLoggedIn) {\n      MainApi.getSavedMovies().then(data => {\n        console.log(`MainApi.getSavedMovies result: ${JSON.stringify(data)}`);\n\n        if (data) {\n          setSavedMovies(JSON.stringify(data));\n          console.log(`Setting saved movies: ${savedMovies}`);\n          return;\n        }\n\n        setSavedMovies([]);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n  function getSearchResults() {\n    setMovieSearchResult(searchResults === null ? [] : searchResults);\n    console.log(`11111 In getSearchResults: ${movieSearchResult}`);\n  } // После отправки поскового запроса \n  // сначала отображаем прелодер, затем\n  // забираем все фильмы с api и сохраняем в переменную состояния.\n  // После сохранения фильмов фильтруем их по поисковому слову\n\n\n  function handleSearchRequest(value) {\n    setIsLoading(true);\n    assembleMoviesList(value).then(() => {\n      setIsLoading(false);\n    });\n  } // Функция по фильтрации массивов с фильмами по ключевому слову\n\n\n  function filterBySearchWord(movies, word) {\n    console.log(`In filterBySearchWord: movies: ${movies}`);\n    movies.filter(movie => {\n      return movie.nameRU.toLowerCase().includes(word.toLowerCase());\n    });\n  } // При отображении фильмов в блоке результатов\n  // фильмы, ранее сохраненные пользователем берутся с сервера\n  // (так как только на них будет ярлык сохраненных));\n\n\n  function assembleMoviesList(word) {\n    // Проверяем все фильмы\n    // Проверяем сохраненные фильмы\n    const allFilteredMovies = filterBySearchWord(movies, word);\n    const allSavedMovies = filterBySearchWord(savedMovies, word); // Сравниваем два массива,\n    // повторяющиеся фильмы берем с серверной стороны\n\n    const movieList = allFilteredMovies.map(movie => {\n      const savedMovie = allSavedMovies.find(savedM => savedM.movieId === movie.id);\n      return savedMovie !== null && savedMovie !== void 0 ? savedMovie : movie;\n    }); // Если результатов нет - записываем в переменную пустой массив\n\n    if (movieList !== null) {\n      localStorage.setItem('searchResults', movieList);\n    } else {\n      localStorage.setItem('searchResults', []);\n    }\n\n    console.log(`assembleMoviesList: ${localStorage.getItem('searchResults')}`);\n  } // Проверяем наличие токена в локальном хранилище\n  // если токен присутствует - \n  // меняем состояние логина и\n  // забираем данные о юзере с сервера и сохранем в переменную состояния. \n\n\n  function tokenCheck() {\n    const jwt = localStorage.getItem('jwt');\n    console.log(`Token in tokenCheck: ${jwt}`);\n\n    if (jwt) {\n      MainApi.getContent(jwt).then(user => {\n        if (user) {\n          setIsLoggedIn(true);\n          setCurrentUser(user);\n          location.pathname === '/signin' && history.push('/movies');\n          console.log(`In tokenCheck: getContent currentUSer: ${currentUser}`);\n          console.log(`In tokenCheck: getContent response: ${JSON.stringify(user)}`);\n        } else {\n          localStorage.removeItem('jwt');\n          setIsLoggedIn(false);\n        }\n      }).catch(err => {\n        localStorage.removeItem('jwt');\n      });\n    } else {\n      setIsLoggedIn(false);\n    }\n  } // Получаем все фильмы с API и сохраненные юзером фильмы при авторизации\n\n\n  useEffect(() => {\n    console.log(`Fetching movies...`);\n    getMovies();\n    getSavedMovies();\n    getSearchResults();\n  }, [isLoggedIn]); // Проверяем токен при передвижению по сайту\n\n  useEffect(() => {\n    tokenCheck();\n  }, [history]);\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Main, {\n            isLoggedIn: isLoggedIn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/movies\",\n          component: Movies,\n          movies: movies,\n          searchResults: searchResults,\n          searchWord: searchWord,\n          onLike: handleSetLike,\n          onDislike: handleRemoveLike,\n          onSearch: handleSearchRequest,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"saved-movies\",\n          component: SavedMovies,\n          savedMovies: savedMovies,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/profile\",\n          component: Profile,\n          onSubmit: handleEditProfileSubmit,\n          onLogOut: handleLogOut,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            handleLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            handleRegister: handleRegister\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          children: /*#__PURE__*/_jsxDEV(Page404, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        isOpen: isInfoToolTipOpen,\n        onClose: closePopups,\n        info: infoToolTipInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8rwWM6je+zF68tnQfVclS1gCICs=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = App;\nexport default App; // Поиск фильмов\n// Нажатие на кнопку поиска\n// получение всех фильмов с MoviesApi\n// сохранение фильмов в переменную состояние movies\n// фильтрация полученных фильмов по поисковому слову\n// сохранение отфильтрованного массива на локальном сервере\n// передача отфильтрованного массива на отрисовку в MoviesList\n// \n// Проверить в следующий раз:\n// перезаписывются ли результаты после фильтрации при передачи в MoviesList\n// или же массив передается пустым даже после поиска\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Route","Switch","useHistory","useLocation","Main","Movies","SavedMovies","Profile","Login","Register","Page404","InfoTooltip","ProtectedRoute","tooltip","MainApi","MoviesApi","CurrentUserContext","App","history","location","isLoggedIn","setIsLoggedIn","currentUser","setCurrentUser","isInfoToolTipOpen","setIsInfoToolTipOpen","infoToolTipInfo","setInfoToolTipInfo","movies","setMovies","savedMovies","setSavedMovies","isLoading","setIsLoading","movieSearchResult","setMovieSearchResult","searchResults","JSON","parse","localStorage","getItem","searchWord","filterState","handleRegister","name","email","password","register","then","res","ok","push","mesage","registrationSuccess","image","successIcon","message","registrationFail","catch","err","console","log","failIcon","finally","handleLogin","login","data","jwt","Error","setItem","_id","id","tokenCheck","loginSuccess","loginFail","handleEditProfileSubmit","editProfile","updateSuccess","updateFail","handleLogOut","removeItem","closePopups","handleSetLike","movie","createLocalCard","createdMovie","saveFail","handleRemoveLike","deleteLocalMovie","movieId","getSavedMovies","removeFail","getMovies","stringify","getSearchResults","handleSearchRequest","value","assembleMoviesList","filterBySearchWord","word","filter","nameRU","toLowerCase","includes","allFilteredMovies","allSavedMovies","movieList","map","savedMovie","find","savedM","getContent","user","pathname"],"sources":["/Users/localmoyashi/dev/movies-explorer-frontend/src/components/App/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport Profile from '../Profile/Profile';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Page404 from '../Page404/Page404';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport * as tooltip from '../../utils/tooltip';\nimport * as MainApi from '../../utils/MainApi';\nimport * as MoviesApi from '../../utils/MoviesApi';\nimport './App.css';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\nfunction App() {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  const [isInfoToolTipOpen, setIsInfoToolTipOpen] = useState(false);\n  const [infoToolTipInfo, setInfoToolTipInfo] = useState({});\n  const [movies, setMovies] = useState([]); // Фильмы, полученные от Api\n  const [savedMovies, setSavedMovies] = useState([]); // Фильмы, сохраненные пользователем\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieSearchResult, setMovieSearchResult] = useState('');\n\n  // ЛОКАЛЬНОЕ ХРАНИЛИЩЕ\n\n  // Фильмы, полученные после фильтрации\n  const searchResults = JSON.parse(localStorage.getItem('searchResults'));\n  // Текст запроса\n  const searchWord = JSON.parse(localStorage.getItem('searchWord'));\n  // Состояние переключателя\n  const filterState = localStorage.getItem('filterState');\n\n  // Обработка регистрации\n\n  function handleRegister (name, email, password) {\n    MainApi.register(email, password, name)\n      .then((res) => {\n        if (res.ok) {\n          history.push('/signin');\n          setInfoToolTipInfo({\n            mesage: tooltip.registrationSuccess,\n            image: tooltip.successIcon\n          });\n        } else {\n          setInfoToolTipInfo({\n            message: tooltip.registrationFail,\n            image: tooltip.successIcon\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.registrationFail,\n          image: tooltip.failIcon\n        });\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true);\n      })\n  }\n  \n  // Обработка логина\n\n  function handleLogin (email, password) {\n    if (!email || !password) {\n      console.log('No email or password on login; aborting.');\n      return;\n    }\n    \n    MainApi.login(email, password)\n      .then((data) => {\n        console.log(`In handleLogin: res data: ${data.jwt}`);\n        if(!data.jwt) {\n          throw new Error('Произошла ошибка (авторизации на фронте)');\n        }\n        localStorage.setItem('jwt', data.jwt);\n        return data._id;\n      })\n      .then((id) => {\n        tokenCheck();\n        setCurrentUser({\n          _id: id,\n        });\n        setIsLoggedIn(true);\n        history.push('/movies');\n        setInfoToolTipInfo({\n          message: tooltip.loginSuccess,\n          image: tooltip.successIcon\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.loginFail,\n          image: tooltip.failIcon\n        });\n      })\n      .finally(() => {\n        console.log(`Before Popup open: ${isLoggedIn}`)\n        setIsInfoToolTipOpen(true);\n      });\n  }\n\n  // Обработка обновления профиля\n\n  function handleEditProfileSubmit (name, email) {\n    MainApi.editProfile(name, email)\n      .then((data) => {\n        setCurrentUser(data);\n        setInfoToolTipInfo({\n          message: tooltip.updateSuccess,\n          image: tooltip.successIcon\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.updateFail,\n          image: tooltip.failIcon\n        })\n      })\n      .finally(() => {\n        setIsInfoToolTipOpen(true)\n      });\n  }\n\n  function handleLogOut () {\n    localStorage.removeItem('jwt');\n    setIsLoggedIn(false);\n    history.push('/signin');\n  }\n\n  function closePopups () {\n    setIsInfoToolTipOpen(false);\n  }\n\n  // Добавить фильм в библиотеку сохраненных фильмов\n  // или оповестить юзера об ошибке\n\n  function handleSetLike (movie) {\n    MainApi.createLocalCard(movie)\n      .then((createdMovie) => {\n        console.log(`Saved movie in handleSetLike: ${createdMovie}`);\n        setSavedMovies([createdMovie, ...savedMovies])\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.saveFail,\n          image: tooltip.failIcon\n        });\n        setIsInfoToolTipOpen(true);\n      })\n  }\n\n  function handleRemoveLike (movie) {\n    MainApi.deleteLocalMovie(movie.movieId)\n      .then(() => {\n        MainApi.getSavedMovies\n          .then((movies) => {\n            setSavedMovies(movies);\n          })\n          .catch((err) => {\n            console.log(err);\n          })\n      })\n      .catch((err) => {\n        console.log(err);\n        setInfoToolTipInfo({\n          message: tooltip.removeFail,\n          image: tooltip.failIcon\n        });\n        setIsInfoToolTipOpen(true);\n      })\n  }\n\n    // Получить фильмы с API\n  // происходит при авторизации\n\n  function getMovies() {\n    MoviesApi.getMovies()\n    .then((data) => {\n      if(data) {\n        console.log(`MoviesApi response: ${JSON.stringify(data)}`);\n        setMovies(JSON.stringify(data));\n        return;\n      }\n      setMovies([]);\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n  }\n\n  // Получить все сохраненные фильмы с сервера\n  \n  function getSavedMovies() {\n    console.log(`Login State in getSavedMovies on login:${isLoggedIn}`);\n    if(isLoggedIn) {\n      MainApi.getSavedMovies()\n      .then((data) => {\n        console.log(`MainApi.getSavedMovies result: ${JSON.stringify(data)}`);\n        if(data) {\n          setSavedMovies(JSON.stringify(data));\n          console.log(`Setting saved movies: ${savedMovies}`);\n          return\n        }\n        setSavedMovies([]);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    }\n  }\n\n  function getSearchResults() {\n    setMovieSearchResult(searchResults === null ? [] : searchResults );\n    console.log(`11111 In getSearchResults: ${movieSearchResult}`);\n  }\n\n  // После отправки поскового запроса \n  // сначала отображаем прелодер, затем\n  // забираем все фильмы с api и сохраняем в переменную состояния.\n  // После сохранения фильмов фильтруем их по поисковому слову\n\n  function handleSearchRequest(value) {\n    setIsLoading(true);\n    assembleMoviesList(value)\n      .then(() => {\n        setIsLoading(false);\n      });\n  }\n\n  // Функция по фильтрации массивов с фильмами по ключевому слову\n\n  function filterBySearchWord(movies, word) {\n    console.log(`In filterBySearchWord: movies: ${movies}`);\n    movies.filter((movie) => {\n      return movie.nameRU.toLowerCase().includes(word.toLowerCase());\n    })\n  }\n\n  // При отображении фильмов в блоке результатов\n  // фильмы, ранее сохраненные пользователем берутся с сервера\n  // (так как только на них будет ярлык сохраненных));\n\n  function assembleMoviesList(word) {\n    // Проверяем все фильмы\n    // Проверяем сохраненные фильмы\n    const allFilteredMovies = filterBySearchWord(movies, word);\n    const allSavedMovies = filterBySearchWord(savedMovies, word);\n\n    // Сравниваем два массива,\n    // повторяющиеся фильмы берем с серверной стороны\n    const movieList = allFilteredMovies.map((movie) => {\n      const savedMovie = allSavedMovies.find((savedM) => savedM.movieId === movie.id);\n      return savedMovie ?? movie;\n    })\n\n    // Если результатов нет - записываем в переменную пустой массив\n    if(movieList !== null) {\n      localStorage.setItem('searchResults', movieList);\n    } else {\n      localStorage.setItem('searchResults', []);\n    }\n    \n    console.log(`assembleMoviesList: ${localStorage.getItem('searchResults')}`);\n  }\n\n  // Проверяем наличие токена в локальном хранилище\n  // если токен присутствует - \n  // меняем состояние логина и\n  // забираем данные о юзере с сервера и сохранем в переменную состояния. \n\n  function tokenCheck () {\n    const jwt = localStorage.getItem('jwt');\n\n    console.log(`Token in tokenCheck: ${jwt}`);\n\n    if (jwt) {\n      MainApi.getContent(jwt)\n        .then((user) => {\n          if (user) {\n            setIsLoggedIn(true);\n            setCurrentUser(user);\n            location.pathname === '/signin' && history.push('/movies');\n\n            console.log(`In tokenCheck: getContent currentUSer: ${currentUser}`);\n            console.log(`In tokenCheck: getContent response: ${JSON.stringify(user)}`);\n          } else {\n            localStorage.removeItem('jwt');\n            setIsLoggedIn(false);\n          }\n        })\n        .catch((err) => {\n          localStorage.removeItem('jwt');\n        })\n    } else {\n      setIsLoggedIn(false);\n    }\n  }\n  // Получаем все фильмы с API и сохраненные юзером фильмы при авторизации\n  useEffect(() => {\n    console.log(`Fetching movies...`);\n\n    getMovies();\n    getSavedMovies();\n    getSearchResults();\n    \n  }, [isLoggedIn])\n\n  // Проверяем токен при передвижению по сайту\n  useEffect(() => {\n    tokenCheck();\n  }, [history]);\n\n  \n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Main\n              isLoggedIn={isLoggedIn} />\n          </Route>\n\n          <ProtectedRoute\n            path=\"/movies\"\n            component={Movies}\n            movies={movies}\n            searchResults={searchResults}\n            searchWord={searchWord}\n            onLike={handleSetLike}\n            onDislike={handleRemoveLike}\n            onSearch={handleSearchRequest}\n            isLoggedIn={isLoggedIn} />\n\n          <ProtectedRoute\n            path=\"saved-movies\"\n            component={SavedMovies}\n            savedMovies={savedMovies}\n            isLoggedIn={isLoggedIn} />\n\n          <ProtectedRoute\n            path=\"/profile\"\n            component={Profile}\n            onSubmit={handleEditProfileSubmit}\n            onLogOut={handleLogOut}\n            isLoggedIn={isLoggedIn} />\n\n          <Route path=\"/signin\">\n            <Login\n              handleLogin={handleLogin} />\n          </Route>\n\n          <Route path=\"/signup\">\n            <Register\n              handleRegister={handleRegister} />\n          </Route>\n\n          <Route path=\"*\">\n            <Page404 />\n          </Route>\n        </Switch>\n\n        <InfoTooltip\n          isOpen={isInfoToolTipOpen}\n          onClose={closePopups}\n          info={infoToolTipInfo} />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n\n// Поиск фильмов\n// Нажатие на кнопку поиска\n// получение всех фильмов с MoviesApi\n// сохранение фильмов в переменную состояние movies\n// фильтрация полученных фильмов по поисковому слову\n// сохранение отфильтрованного массива на локальном сервере\n// передача отфильтрованного массива на отрисовку в MoviesList\n// \n// Проверить в следующий раз:\n// перезаписывются ли результаты после фильтрации при передачи в MoviesList\n// или же массив передается пустым даже после поиска"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,WAApC,QAAuD,kBAAvD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,uBAA3B;AACA,OAAO,WAAP;AACA,SAASC,kBAAT,QAAmC,mCAAnC;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAMC,OAAO,GAAGhB,UAAU,EAA1B;EACA,MAAMiB,QAAQ,GAAGhB,WAAW,EAA5B;EAEA,MAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACuB,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACyB,iBAAD,EAAoBC,oBAApB,IAA4C1B,QAAQ,CAAC,KAAD,CAA1D;EACA,MAAM,CAAC2B,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAAC6B,MAAD,EAASC,SAAT,IAAsB9B,QAAQ,CAAC,EAAD,CAApC,CATa,CAS6B;;EAC1C,MAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C,CAVa,CAUuC;;EACpD,MAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACmC,iBAAD,EAAoBC,oBAApB,IAA4CpC,QAAQ,CAAC,EAAD,CAA1D,CAZa,CAcb;EAEA;;EACA,MAAMqC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAAtB,CAjBa,CAkBb;;EACA,MAAMC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAnB,CAnBa,CAoBb;;EACA,MAAME,WAAW,GAAGH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB,CArBa,CAuBb;;EAEA,SAASG,cAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,QAAtC,EAAgD;IAC9ChC,OAAO,CAACiC,QAAR,CAAiBF,KAAjB,EAAwBC,QAAxB,EAAkCF,IAAlC,EACGI,IADH,CACSC,GAAD,IAAS;MACb,IAAIA,GAAG,CAACC,EAAR,EAAY;QACVhC,OAAO,CAACiC,IAAR,CAAa,SAAb;QACAxB,kBAAkB,CAAC;UACjByB,MAAM,EAAEvC,OAAO,CAACwC,mBADC;UAEjBC,KAAK,EAAEzC,OAAO,CAAC0C;QAFE,CAAD,CAAlB;MAID,CAND,MAMO;QACL5B,kBAAkB,CAAC;UACjB6B,OAAO,EAAE3C,OAAO,CAAC4C,gBADA;UAEjBH,KAAK,EAAEzC,OAAO,CAAC0C;QAFE,CAAD,CAAlB;MAID;IACF,CAdH,EAeGG,KAfH,CAeUC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAhC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAAC4C,gBADA;QAEjBH,KAAK,EAAEzC,OAAO,CAACiD;MAFE,CAAD,CAAlB;IAID,CArBH,EAsBGC,OAtBH,CAsBW,MAAM;MACbtC,oBAAoB,CAAC,IAAD,CAApB;IACD,CAxBH;EAyBD,CAnDY,CAqDb;;;EAEA,SAASuC,WAAT,CAAsBnB,KAAtB,EAA6BC,QAA7B,EAAuC;IACrC,IAAI,CAACD,KAAD,IAAU,CAACC,QAAf,EAAyB;MACvBc,OAAO,CAACC,GAAR,CAAY,0CAAZ;MACA;IACD;;IAED/C,OAAO,CAACmD,KAAR,CAAcpB,KAAd,EAAqBC,QAArB,EACGE,IADH,CACSkB,IAAD,IAAU;MACdN,OAAO,CAACC,GAAR,CAAa,6BAA4BK,IAAI,CAACC,GAAI,EAAlD;;MACA,IAAG,CAACD,IAAI,CAACC,GAAT,EAAc;QACZ,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;MACD;;MACD7B,YAAY,CAAC8B,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,GAAjC;MACA,OAAOD,IAAI,CAACI,GAAZ;IACD,CARH,EASGtB,IATH,CASSuB,EAAD,IAAQ;MACZC,UAAU;MACVjD,cAAc,CAAC;QACb+C,GAAG,EAAEC;MADQ,CAAD,CAAd;MAGAlD,aAAa,CAAC,IAAD,CAAb;MACAH,OAAO,CAACiC,IAAR,CAAa,SAAb;MACAxB,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAAC4D,YADA;QAEjBnB,KAAK,EAAEzC,OAAO,CAAC0C;MAFE,CAAD,CAAlB;IAID,CApBH,EAqBGG,KArBH,CAqBUC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAhC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAAC6D,SADA;QAEjBpB,KAAK,EAAEzC,OAAO,CAACiD;MAFE,CAAD,CAAlB;IAID,CA3BH,EA4BGC,OA5BH,CA4BW,MAAM;MACbH,OAAO,CAACC,GAAR,CAAa,sBAAqBzC,UAAW,EAA7C;MACAK,oBAAoB,CAAC,IAAD,CAApB;IACD,CA/BH;EAgCD,CA7FY,CA+Fb;;;EAEA,SAASkD,uBAAT,CAAkC/B,IAAlC,EAAwCC,KAAxC,EAA+C;IAC7C/B,OAAO,CAAC8D,WAAR,CAAoBhC,IAApB,EAA0BC,KAA1B,EACGG,IADH,CACSkB,IAAD,IAAU;MACd3C,cAAc,CAAC2C,IAAD,CAAd;MACAvC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAACgE,aADA;QAEjBvB,KAAK,EAAEzC,OAAO,CAAC0C;MAFE,CAAD,CAAlB;IAID,CAPH,EAQGG,KARH,CAQUC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAhC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAACiE,UADA;QAEjBxB,KAAK,EAAEzC,OAAO,CAACiD;MAFE,CAAD,CAAlB;IAID,CAdH,EAeGC,OAfH,CAeW,MAAM;MACbtC,oBAAoB,CAAC,IAAD,CAApB;IACD,CAjBH;EAkBD;;EAED,SAASsD,YAAT,GAAyB;IACvBxC,YAAY,CAACyC,UAAb,CAAwB,KAAxB;IACA3D,aAAa,CAAC,KAAD,CAAb;IACAH,OAAO,CAACiC,IAAR,CAAa,SAAb;EACD;;EAED,SAAS8B,WAAT,GAAwB;IACtBxD,oBAAoB,CAAC,KAAD,CAApB;EACD,CA9HY,CAgIb;EACA;;;EAEA,SAASyD,aAAT,CAAwBC,KAAxB,EAA+B;IAC7BrE,OAAO,CAACsE,eAAR,CAAwBD,KAAxB,EACGnC,IADH,CACSqC,YAAD,IAAkB;MACtBzB,OAAO,CAACC,GAAR,CAAa,iCAAgCwB,YAAa,EAA1D;MACAtD,cAAc,CAAC,CAACsD,YAAD,EAAe,GAAGvD,WAAlB,CAAD,CAAd;IACD,CAJH,EAKG4B,KALH,CAKUC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAhC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAACyE,QADA;QAEjBhC,KAAK,EAAEzC,OAAO,CAACiD;MAFE,CAAD,CAAlB;MAIArC,oBAAoB,CAAC,IAAD,CAApB;IACD,CAZH;EAaD;;EAED,SAAS8D,gBAAT,CAA2BJ,KAA3B,EAAkC;IAChCrE,OAAO,CAAC0E,gBAAR,CAAyBL,KAAK,CAACM,OAA/B,EACGzC,IADH,CACQ,MAAM;MACVlC,OAAO,CAAC4E,cAAR,CACG1C,IADH,CACSpB,MAAD,IAAY;QAChBG,cAAc,CAACH,MAAD,CAAd;MACD,CAHH,EAIG8B,KAJH,CAIUC,GAAD,IAAS;QACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD,CANH;IAOD,CATH,EAUGD,KAVH,CAUUC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAhC,kBAAkB,CAAC;QACjB6B,OAAO,EAAE3C,OAAO,CAAC8E,UADA;QAEjBrC,KAAK,EAAEzC,OAAO,CAACiD;MAFE,CAAD,CAAlB;MAIArC,oBAAoB,CAAC,IAAD,CAApB;IACD,CAjBH;EAkBD,CAtKY,CAwKX;EACF;;;EAEA,SAASmE,SAAT,GAAqB;IACnB7E,SAAS,CAAC6E,SAAV,GACC5C,IADD,CACOkB,IAAD,IAAU;MACd,IAAGA,IAAH,EAAS;QACPN,OAAO,CAACC,GAAR,CAAa,uBAAsBxB,IAAI,CAACwD,SAAL,CAAe3B,IAAf,CAAqB,EAAxD;QACArC,SAAS,CAACQ,IAAI,CAACwD,SAAL,CAAe3B,IAAf,CAAD,CAAT;QACA;MACD;;MACDrC,SAAS,CAAC,EAAD,CAAT;IACD,CARD,EASC6B,KATD,CASQC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACD,CAXD;EAYD,CAxLY,CA0Lb;;;EAEA,SAAS+B,cAAT,GAA0B;IACxB9B,OAAO,CAACC,GAAR,CAAa,0CAAyCzC,UAAW,EAAjE;;IACA,IAAGA,UAAH,EAAe;MACbN,OAAO,CAAC4E,cAAR,GACC1C,IADD,CACOkB,IAAD,IAAU;QACdN,OAAO,CAACC,GAAR,CAAa,kCAAiCxB,IAAI,CAACwD,SAAL,CAAe3B,IAAf,CAAqB,EAAnE;;QACA,IAAGA,IAAH,EAAS;UACPnC,cAAc,CAACM,IAAI,CAACwD,SAAL,CAAe3B,IAAf,CAAD,CAAd;UACAN,OAAO,CAACC,GAAR,CAAa,yBAAwB/B,WAAY,EAAjD;UACA;QACD;;QACDC,cAAc,CAAC,EAAD,CAAd;MACD,CATD,EAUC2B,KAVD,CAUQC,GAAD,IAAS;QACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD,CAZD;IAaD;EACF;;EAED,SAASmC,gBAAT,GAA4B;IAC1B3D,oBAAoB,CAACC,aAAa,KAAK,IAAlB,GAAyB,EAAzB,GAA8BA,aAA/B,CAApB;IACAwB,OAAO,CAACC,GAAR,CAAa,8BAA6B3B,iBAAkB,EAA5D;EACD,CAlNY,CAoNb;EACA;EACA;EACA;;;EAEA,SAAS6D,mBAAT,CAA6BC,KAA7B,EAAoC;IAClC/D,YAAY,CAAC,IAAD,CAAZ;IACAgE,kBAAkB,CAACD,KAAD,CAAlB,CACGhD,IADH,CACQ,MAAM;MACVf,YAAY,CAAC,KAAD,CAAZ;IACD,CAHH;EAID,CA/NY,CAiOb;;;EAEA,SAASiE,kBAAT,CAA4BtE,MAA5B,EAAoCuE,IAApC,EAA0C;IACxCvC,OAAO,CAACC,GAAR,CAAa,kCAAiCjC,MAAO,EAArD;IACAA,MAAM,CAACwE,MAAP,CAAejB,KAAD,IAAW;MACvB,OAAOA,KAAK,CAACkB,MAAN,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCJ,IAAI,CAACG,WAAL,EAApC,CAAP;IACD,CAFD;EAGD,CAxOY,CA0Ob;EACA;EACA;;;EAEA,SAASL,kBAAT,CAA4BE,IAA5B,EAAkC;IAChC;IACA;IACA,MAAMK,iBAAiB,GAAGN,kBAAkB,CAACtE,MAAD,EAASuE,IAAT,CAA5C;IACA,MAAMM,cAAc,GAAGP,kBAAkB,CAACpE,WAAD,EAAcqE,IAAd,CAAzC,CAJgC,CAMhC;IACA;;IACA,MAAMO,SAAS,GAAGF,iBAAiB,CAACG,GAAlB,CAAuBxB,KAAD,IAAW;MACjD,MAAMyB,UAAU,GAAGH,cAAc,CAACI,IAAf,CAAqBC,MAAD,IAAYA,MAAM,CAACrB,OAAP,KAAmBN,KAAK,CAACZ,EAAzD,CAAnB;MACA,OAAOqC,UAAP,aAAOA,UAAP,cAAOA,UAAP,GAAqBzB,KAArB;IACD,CAHiB,CAAlB,CARgC,CAahC;;IACA,IAAGuB,SAAS,KAAK,IAAjB,EAAuB;MACrBnE,YAAY,CAAC8B,OAAb,CAAqB,eAArB,EAAsCqC,SAAtC;IACD,CAFD,MAEO;MACLnE,YAAY,CAAC8B,OAAb,CAAqB,eAArB,EAAsC,EAAtC;IACD;;IAEDT,OAAO,CAACC,GAAR,CAAa,uBAAsBtB,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAsC,EAAzE;EACD,CAnQY,CAqQb;EACA;EACA;EACA;;;EAEA,SAASgC,UAAT,GAAuB;IACrB,MAAML,GAAG,GAAG5B,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAZ;IAEAoB,OAAO,CAACC,GAAR,CAAa,wBAAuBM,GAAI,EAAxC;;IAEA,IAAIA,GAAJ,EAAS;MACPrD,OAAO,CAACiG,UAAR,CAAmB5C,GAAnB,EACGnB,IADH,CACSgE,IAAD,IAAU;QACd,IAAIA,IAAJ,EAAU;UACR3F,aAAa,CAAC,IAAD,CAAb;UACAE,cAAc,CAACyF,IAAD,CAAd;UACA7F,QAAQ,CAAC8F,QAAT,KAAsB,SAAtB,IAAmC/F,OAAO,CAACiC,IAAR,CAAa,SAAb,CAAnC;UAEAS,OAAO,CAACC,GAAR,CAAa,0CAAyCvC,WAAY,EAAlE;UACAsC,OAAO,CAACC,GAAR,CAAa,uCAAsCxB,IAAI,CAACwD,SAAL,CAAemB,IAAf,CAAqB,EAAxE;QACD,CAPD,MAOO;UACLzE,YAAY,CAACyC,UAAb,CAAwB,KAAxB;UACA3D,aAAa,CAAC,KAAD,CAAb;QACD;MACF,CAbH,EAcGqC,KAdH,CAcUC,GAAD,IAAS;QACdpB,YAAY,CAACyC,UAAb,CAAwB,KAAxB;MACD,CAhBH;IAiBD,CAlBD,MAkBO;MACL3D,aAAa,CAAC,KAAD,CAAb;IACD;EACF,CApSY,CAqSb;;;EACAvB,SAAS,CAAC,MAAM;IACd8D,OAAO,CAACC,GAAR,CAAa,oBAAb;IAEA+B,SAAS;IACTF,cAAc;IACdI,gBAAgB;EAEjB,CAPQ,EAON,CAAC1E,UAAD,CAPM,CAAT,CAtSa,CA+Sb;;EACAtB,SAAS,CAAC,MAAM;IACd0E,UAAU;EACX,CAFQ,EAEN,CAACtD,OAAD,CAFM,CAAT;EAKA,oBACE,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAEI,WAApC;IAAA,uBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE,QAAC,MAAD;QAAA,wBACE,QAAC,KAAD;UAAO,KAAK,MAAZ;UAAa,IAAI,EAAC,GAAlB;UAAA,uBACE,QAAC,IAAD;YACE,UAAU,EAAEF;UADd;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,eAME,QAAC,cAAD;UACE,IAAI,EAAC,SADP;UAEE,SAAS,EAAEf,MAFb;UAGE,MAAM,EAAEuB,MAHV;UAIE,aAAa,EAAEQ,aAJjB;UAKE,UAAU,EAAEK,UALd;UAME,MAAM,EAAEyC,aANV;UAOE,SAAS,EAAEK,gBAPb;UAQE,QAAQ,EAAEQ,mBARZ;UASE,UAAU,EAAE3E;QATd;UAAA;UAAA;UAAA;QAAA,QANF,eAiBE,QAAC,cAAD;UACE,IAAI,EAAC,cADP;UAEE,SAAS,EAAEd,WAFb;UAGE,WAAW,EAAEwB,WAHf;UAIE,UAAU,EAAEV;QAJd;UAAA;UAAA;UAAA;QAAA,QAjBF,eAuBE,QAAC,cAAD;UACE,IAAI,EAAC,UADP;UAEE,SAAS,EAAEb,OAFb;UAGE,QAAQ,EAAEoE,uBAHZ;UAIE,QAAQ,EAAEI,YAJZ;UAKE,UAAU,EAAE3D;QALd;UAAA;UAAA;UAAA;QAAA,QAvBF,eA8BE,QAAC,KAAD;UAAO,IAAI,EAAC,SAAZ;UAAA,uBACE,QAAC,KAAD;YACE,WAAW,EAAE4C;UADf;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QA9BF,eAmCE,QAAC,KAAD;UAAO,IAAI,EAAC,SAAZ;UAAA,uBACE,QAAC,QAAD;YACE,cAAc,EAAErB;UADlB;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAnCF,eAwCE,QAAC,KAAD;UAAO,IAAI,EAAC,GAAZ;UAAA,uBACE,QAAC,OAAD;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAxCF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eA8CE,QAAC,WAAD;QACE,MAAM,EAAEnB,iBADV;QAEE,OAAO,EAAEyD,WAFX;QAGE,IAAI,EAAEvD;MAHR;QAAA;QAAA;QAAA;MAAA,QA9CF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAuDD;;GA5WQT,G;UAESf,U,EACCC,W;;;KAHVc,G;AA8WT,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}